
ambient-attx4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000522  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000036  00800060  00800060  00000596  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000081  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001c6  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f5  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023d  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f8  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000274  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000050  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	b0 c1       	rjmp	.+864    	; 0x364 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	11 c1       	rjmp	.+546    	; 0x230 <__vector_6>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	16 c0       	rjmp	.+44     	; 0x40 <__vector_9>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	1a c0       	rjmp	.+52     	; 0x56 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a6 39       	cpi	r26, 0x96	; 150
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	c5 d0       	rcall	.+394    	; 0x1c6 <main>
  3c:	70 c2       	rjmp	.+1248   	; 0x51e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_9>:
 *  results in one clock period on the clock pin and for the USI counter.

 */

ISR(TIM0_COMPA_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
	USICR |= (1<<USITC);	// Toggle clock output pin.
  4a:	68 9a       	sbi	0x0d, 0	; 13
}
  4c:	0f 90       	pop	r0
  4e:	0f be       	out	0x3f, r0	; 63
  50:	0f 90       	pop	r0
  52:	1f 90       	pop	r1
  54:	18 95       	reti

00000056 <__vector_16>:

 */

ISR(USI_OVF_vect)

{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24

	// Master must now disable the compare match interrupt

	// to prevent more USI counter clocks.

	if( spiX_status.masterMode == 1 ) {
  62:	80 91 95 00 	lds	r24, 0x0095
  66:	80 ff       	sbrs	r24, 0
  68:	03 c0       	rjmp	.+6      	; 0x70 <__vector_16+0x1a>

		TIMSK0 &= ~(1<<OCIE0A);
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	8d 7f       	andi	r24, 0xFD	; 253
  6e:	89 bf       	out	0x39, r24	; 57

	

	// Update flags and clear USI counter

	USISR = (1<<USIOIF);
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	8e b9       	out	0x0e, r24	; 14

	spiX_status.transferComplete = 1;
  74:	80 91 95 00 	lds	r24, 0x0095
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	80 93 95 00 	sts	0x0095, r24



	// Copy USIDR to buffer to prevent overwrite on next transfer.

	storedUSIDR = USIDR;
  7e:	8f b1       	in	r24, 0x0f	; 15
  80:	80 93 94 00 	sts	0x0094, r24

}
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <spiX_initmaster>:

{

	// Configure port directions.

	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Outputs.
  90:	9a b3       	in	r25, 0x1a	; 26
  92:	90 63       	ori	r25, 0x30	; 48
  94:	9a bb       	out	0x1a, r25	; 26

	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                      // Inputs.
  96:	d6 98       	cbi	0x1a, 6	; 26

	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                       // Pull-ups.
  98:	de 9a       	sbi	0x1b, 6	; 27

	// Configure USI to 3-wire master mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |

	        (1<<USICS1) | (spi_mode<<USICS0) |
  9a:	88 0f       	add	r24, r24
  9c:	88 0f       	add	r24, r24

	

	// Configure USI to 3-wire master mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |
  9e:	8a 65       	ori	r24, 0x5A	; 90
  a0:	8d b9       	out	0x0d, r24	; 13

	// Enable 'Clear Timer on Compare match' and init prescaler.

	// This made it impossible to get interrupts for some reason
	// TCCR0A = (1<<WGM01);
	TCCR0B = TC0_PS_SETTING;
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	83 bf       	out	0x33, r24	; 51
	

	// Init Output Compare Register.

	OCR0A = TC0_COMPARE_VALUE;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	86 bf       	out	0x36, r24	; 54

	

	// Init driver status register.

	spiX_status.masterMode       = 1;
  aa:	80 91 95 00 	lds	r24, 0x0095
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 93 95 00 	sts	0x0095, r24

	spiX_status.transferComplete = 0;
  b4:	80 91 95 00 	lds	r24, 0x0095
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	80 93 95 00 	sts	0x0095, r24

	spiX_status.writeCollision   = 0;
  be:	80 91 95 00 	lds	r24, 0x0095
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 93 95 00 	sts	0x0095, r24
	

	storedUSIDR = 0;
  c8:	10 92 94 00 	sts	0x0094, r1

}
  cc:	08 95       	ret

000000ce <spiX_initslave>:

{

	// Configure port directions.

	USI_DIR_REG |= (1<<USI_DATAOUT_PIN);                      // Outputs.
  ce:	d5 9a       	sbi	0x1a, 5	; 26

	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN); // Inputs.
  d0:	d6 98       	cbi	0x1a, 6	; 26

	USI_OUT_REG |= (1<<USI_DATAIN_PIN) | (1<<USI_CLOCK_PIN);  // Pull-ups.
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	90 65       	ori	r25, 0x50	; 80
  d6:	9b bb       	out	0x1b, r25	; 27

	// Configure USI to 3-wire slave mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |

	        (1<<USICS1) | (spi_mode<<USICS0);
  d8:	88 0f       	add	r24, r24
  da:	88 0f       	add	r24, r24

	

	// Configure USI to 3-wire slave mode with overflow interrupt.

	USICR = (1<<USIOIE) | (1<<USIWM0) |
  dc:	88 65       	ori	r24, 0x58	; 88
  de:	8d b9       	out	0x0d, r24	; 13

	

	// Init driver status register.

	spiX_status.masterMode       = 0;
  e0:	80 91 95 00 	lds	r24, 0x0095
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	80 93 95 00 	sts	0x0095, r24

	spiX_status.transferComplete = 0;
  ea:	80 91 95 00 	lds	r24, 0x0095
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	80 93 95 00 	sts	0x0095, r24

	spiX_status.writeCollision   = 0;
  f4:	80 91 95 00 	lds	r24, 0x0095
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	80 93 95 00 	sts	0x0095, r24

	

	storedUSIDR = 0;
  fe:	10 92 94 00 	sts	0x0094, r1

}
 102:	08 95       	ret

00000104 <spiX_put>:

	// Check if transmission in progress,

	// i.e. USI counter unequal to zero.

	if( (USISR & 0x0F) != 0 ) {
 104:	2e b1       	in	r18, 0x0e	; 14
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	2f 70       	andi	r18, 0x0F	; 15
 10a:	30 70       	andi	r19, 0x00	; 0
 10c:	21 15       	cp	r18, r1
 10e:	31 05       	cpc	r19, r1
 110:	39 f0       	breq	.+14     	; 0x120 <spiX_put+0x1c>

		// Indicate write collision and return.

		spiX_status.writeCollision = 1;
 112:	80 91 95 00 	lds	r24, 0x0095
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 93 95 00 	sts	0x0095, r24

		return 0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

	}

	// Reinit flags.

	spiX_status.transferComplete = 0;
 120:	90 91 95 00 	lds	r25, 0x0095
 124:	9d 7f       	andi	r25, 0xFD	; 253
 126:	90 93 95 00 	sts	0x0095, r25

	spiX_status.writeCollision = 0;
 12a:	90 91 95 00 	lds	r25, 0x0095
 12e:	9b 7f       	andi	r25, 0xFB	; 251
 130:	90 93 95 00 	sts	0x0095, r25



	// Put data in USI data register.

	USIDR = val;
 134:	8f b9       	out	0x0f, r24	; 15

	

	// Master should now enable compare match interrupts.

	if( spiX_status.masterMode == 1 ) {
 136:	80 91 95 00 	lds	r24, 0x0095
 13a:	80 ff       	sbrs	r24, 0
 13c:	06 c0       	rjmp	.+12     	; 0x14a <spiX_put+0x46>

		TIFR0 |= (1<<OCF0A);   // Clear compare match flag.
 13e:	88 b7       	in	r24, 0x38	; 56
 140:	82 60       	ori	r24, 0x02	; 2
 142:	88 bf       	out	0x38, r24	; 56

		TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
 144:	89 b7       	in	r24, 0x39	; 57
 146:	82 60       	ori	r24, 0x02	; 2
 148:	89 bf       	out	0x39, r24	; 57

	}



	if( spiX_status.writeCollision == 0 ) return 1;
 14a:	90 91 95 00 	lds	r25, 0x0095

		// Indicate write collision and return.

		spiX_status.writeCollision = 1;

		return 0;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	92 fd       	sbrc	r25, 2
 152:	80 e0       	ldi	r24, 0x00	; 0

	if( spiX_status.writeCollision == 0 ) return 1;

	return 0;

}
 154:	08 95       	ret

00000156 <spiX_get>:

{

	return storedUSIDR;

}
 156:	80 91 94 00 	lds	r24, 0x0094
 15a:	08 95       	ret

0000015c <spiX_wait>:

void spiX_wait(void)

{

	do {} while( spiX_status.transferComplete == 0 );
 15c:	80 91 95 00 	lds	r24, 0x0095
 160:	81 ff       	sbrs	r24, 1
 162:	fc cf       	rjmp	.-8      	; 0x15c <spiX_wait>

}
 164:	08 95       	ret

00000166 <setupIO>:
  sei();
}

void setupIO(void) {
  // Make the "decibel" pin an input
  cbi(DDRA, SOUND_PIN);
 166:	d1 98       	cbi	0x1a, 1	; 26

  // Make the ambient light as input
  cbi(DDRA, LIGHT_PIN);
 168:	d3 98       	cbi	0x1a, 3	; 26
  
  // Make the Interrupt pin an output
  sbi(DDRB, IRQ_PIN);
 16a:	b9 9a       	sbi	0x17, 1	; 23
  
  // Pull it low
  cbi(PORTB, IRQ_PIN);
 16c:	c1 98       	cbi	0x18, 1	; 24

  // Set MOSI as an input
  cbi(DDRA, MOSI);
 16e:	d6 98       	cbi	0x1a, 6	; 26
}
 170:	08 95       	ret

00000172 <enableSPI>:

void enableSPI(void) {
  // configure: interrupt on INT0 pin falling edge
  MCUCR = (1<<ISC01);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	85 bf       	out	0x35, r24	; 53

  // enable interrupt
  sbi(GIMSK, INT0);
 176:	8b b7       	in	r24, 0x3b	; 59
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8b bf       	out	0x3b, r24	; 59

  // Set CS as INPUT
  cbi(DDRB, CS_PIN);
 17c:	ba 98       	cbi	0x17, 2	; 23

  // Set up pull up to keep CS high
  sbi(PORTB, CS_PIN);
 17e:	c2 9a       	sbi	0x18, 2	; 24

  // disable spi counter overflow enable
  USICR&= ~(1<<USIOIE);
 180:	6e 98       	cbi	0x0d, 6	; 13
  USICR&= ~(1<<USIWM0);
 182:	6c 98       	cbi	0x0d, 4	; 13
}
 184:	08 95       	ret

00000186 <setupTimer>:

void setupTimer(void) {
  // Set clock divider to 8 (1MHz)
  sbi(TCCR1B, CS11);
 186:	8e b5       	in	r24, 0x2e	; 46
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	8e bd       	out	0x2e, r24	; 46

  // Set the counter to CTC (clear on match)
  sbi(TCCR1B, WGM12);
 18c:	8e b5       	in	r24, 0x2e	; 46
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	8e bd       	out	0x2e, r24	; 46

  // Set frequency to 5kHz
  // (8000000/8/200) Hz
  OCR1A = 200;
 192:	88 ec       	ldi	r24, 0xC8	; 200
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9b bd       	out	0x2b, r25	; 43
 198:	8a bd       	out	0x2a, r24	; 42

  // Allow interrupts on comp a
  sbi(TIMSK1, OCIE1A);
 19a:	61 9a       	sbi	0x0c, 1	; 12
}
 19c:	08 95       	ret

0000019e <prepareADC>:

void prepareADC(void) {

  // Make sure the power reduction register isn't set
  cbi(PRR, PRADC);
 19e:	00 98       	cbi	0x00, 0	; 0

  // Enable ADC by writing ADEN in ADSCRA
  sbi(ADCSRA, ADEN);
 1a0:	37 9a       	sbi	0x06, 7	; 6

  // Set up ADC clock prescalar to 64 (125kHz) by writing ADPS bits of ADSCRA
  ADCSRA |= 6;
 1a2:	86 b1       	in	r24, 0x06	; 6
 1a4:	86 60       	ori	r24, 0x06	; 6
 1a6:	86 b9       	out	0x06, r24	; 6

  // Set reference voltage to AREF by writing to the ADMUX register
  ADMUX = 0;
 1a8:	17 b8       	out	0x07, r1	; 7
  cbi(ADMUX, REFS1);
 1aa:	3f 98       	cbi	0x07, 7	; 7
  sbi(ADMUX, REFS0);
 1ac:	3e 9a       	sbi	0x07, 6	; 7
}
 1ae:	08 95       	ret

000001b0 <setup>:
}

void setup(void) {
  
  // Turn off interrupts  
  cli();
 1b0:	f8 94       	cli

  // Reset buffer locations
  LightBuffer.bufferLocation = 0;
 1b2:	10 92 7e 00 	sts	0x007E, r1
  SoundBuffer.bufferLocation = 0;
 1b6:	10 92 93 00 	sts	0x0093, r1

  setupIO();
 1ba:	d5 df       	rcall	.-86     	; 0x166 <setupIO>

  prepareADC();
 1bc:	f0 df       	rcall	.-32     	; 0x19e <prepareADC>

  enableSPI();
 1be:	d9 df       	rcall	.-78     	; 0x172 <enableSPI>

  setupTimer();
 1c0:	e2 df       	rcall	.-60     	; 0x186 <setupTimer>

  // Unleash the interrupts!
  sei();
 1c2:	78 94       	sei
}
 1c4:	08 95       	ret

000001c6 <main>:
uint16_t analogRead(char pin);
volatile DataBuffer bufferForCommand(uint8_t command);

int main(void) {

  setup();
 1c6:	f4 df       	rcall	.-24     	; 0x1b0 <setup>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x2>

000001ca <analogRead>:
uint16_t analogRead(char pin) {

  uint16_t value;

  // Clear lowest five bits
  ADMUX &= 0b11100000;
 1ca:	97 b1       	in	r25, 0x07	; 7
 1cc:	90 7e       	andi	r25, 0xE0	; 224
 1ce:	97 b9       	out	0x07, r25	; 7

  // Set five bits with pin
  ADMUX |= (pin & 0b00011111);
 1d0:	97 b1       	in	r25, 0x07	; 7
 1d2:	8f 71       	andi	r24, 0x1F	; 31
 1d4:	89 2b       	or	r24, r25
 1d6:	87 b9       	out	0x07, r24	; 7

  // Start the conversion
  sbi(ADCSRA, ADSC);
 1d8:	36 9a       	sbi	0x06, 6	; 6

  // Wait for the conversion to finish
  while((ADCSRA & (1<<ADSC)) != 0);
 1da:	36 99       	sbic	0x06, 6	; 6
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <analogRead+0x10>

  value = ADCL;
 1de:	84 b1       	in	r24, 0x04	; 4

  value += (ADCH << 8);
 1e0:	95 b1       	in	r25, 0x05	; 5
 1e2:	39 2f       	mov	r19, r25
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	28 0f       	add	r18, r24
 1e8:	31 1d       	adc	r19, r1

  // Return the 10 bit result
  return value;
}
 1ea:	c9 01       	movw	r24, r18
 1ec:	08 95       	ret

000001ee <bufferForCommand>:

volatile DataBuffer bufferForCommand(uint8_t command) {

  if (command == LIGHT_CMD)
 1ee:	62 30       	cpi	r22, 0x02	; 2
 1f0:	59 f4       	brne	.+22     	; 0x208 <bufferForCommand+0x1a>
  {
    return LightBuffer;
 1f2:	28 2f       	mov	r18, r24
 1f4:	39 2f       	mov	r19, r25
 1f6:	d9 01       	movw	r26, r18
 1f8:	ea e6       	ldi	r30, 0x6A	; 106
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	25 e1       	ldi	r18, 0x15	; 21
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	21 50       	subi	r18, 0x01	; 1
 204:	e1 f7       	brne	.-8      	; 0x1fe <bufferForCommand+0x10>
 206:	08 95       	ret
  }
  else
  {
    return SoundBuffer;
 208:	28 2f       	mov	r18, r24
 20a:	39 2f       	mov	r19, r25
 20c:	d9 01       	movw	r26, r18
 20e:	ef e7       	ldi	r30, 0x7F	; 127
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	25 e1       	ldi	r18, 0x15	; 21
 214:	01 90       	ld	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	e1 f7       	brne	.-8      	; 0x214 <bufferForCommand+0x26>
  }
}
 21c:	08 95       	ret

0000021e <triggerValueForCommand>:

volatile uint16_t *triggerValueForCommand(uint8_t command) {
  if (command == LIGHT_TRIGGER_CMD) {
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	19 f4       	brne	.+6      	; 0x228 <triggerValueForCommand+0xa>
    return &lightTrigger;
 222:	22 e6       	ldi	r18, 0x62	; 98
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <triggerValueForCommand+0xe>
  }
  else {
    return &soundTrigger;
 228:	26 e6       	ldi	r18, 0x66	; 102
 22a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 22c:	c9 01       	movw	r24, r18
 22e:	08 95       	ret

00000230 <__vector_6>:

ISR(TIM1_COMPA_vect) {
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	1f 93       	push	r17
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
  
  LightBuffer.buffer[LightBuffer.bufferLocation++] = analogRead(LIGHT_PIN);
 258:	10 91 7e 00 	lds	r17, 0x007E
 25c:	c1 2f       	mov	r28, r17
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	b3 df       	rcall	.-154    	; 0x1ca <analogRead>
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	c6 59       	subi	r28, 0x96	; 150
 26a:	df 4f       	sbci	r29, 0xFF	; 255
 26c:	99 83       	std	Y+1, r25	; 0x01
 26e:	88 83       	st	Y, r24
 270:	1f 5f       	subi	r17, 0xFF	; 255
 272:	10 93 7e 00 	sts	0x007E, r17

  // If a light trigger has been set and the level is hit 
  if (lightTrigger != 0 && LightBuffer.buffer[LightBuffer.bufferLocation - 1] >= lightTrigger) {
 276:	80 91 62 00 	lds	r24, 0x0062
 27a:	90 91 63 00 	lds	r25, 0x0063
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	f1 f0       	breq	.+60     	; 0x2be <__vector_6+0x8e>
 282:	e0 91 7e 00 	lds	r30, 0x007E
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	e8 59       	subi	r30, 0x98	; 152
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	20 81       	ld	r18, Z
 292:	31 81       	ldd	r19, Z+1	; 0x01
 294:	80 91 62 00 	lds	r24, 0x0062
 298:	90 91 63 00 	lds	r25, 0x0063
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	70 f0       	brcs	.+28     	; 0x2be <__vector_6+0x8e>
    
    // Set the read value
    lightTriggerReadVal = LightBuffer.buffer[LightBuffer.bufferLocation - 1];
 2a2:	e0 91 7e 00 	lds	r30, 0x007E
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e8 59       	subi	r30, 0x98	; 152
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	90 93 65 00 	sts	0x0065, r25
 2b8:	80 93 64 00 	sts	0x0064, r24
    
    // Raise the interrupt pin
    sbi(PORTB, IRQ_PIN);
 2bc:	c1 9a       	sbi	0x18, 1	; 24
    
  }
  
  if (LightBuffer.bufferLocation == BUF_SIZE) {
 2be:	80 91 7e 00 	lds	r24, 0x007E
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	11 f4       	brne	.+4      	; 0x2ca <__vector_6+0x9a>
    LightBuffer.bufferLocation = 0;
 2c6:	10 92 7e 00 	sts	0x007E, r1
  }
  
  SoundBuffer.buffer[SoundBuffer.bufferLocation++] = analogRead(SOUND_PIN);
 2ca:	10 91 93 00 	lds	r17, 0x0093
 2ce:	c1 2f       	mov	r28, r17
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	7a df       	rcall	.-268    	; 0x1ca <analogRead>
 2d6:	cc 0f       	add	r28, r28
 2d8:	dd 1f       	adc	r29, r29
 2da:	c1 58       	subi	r28, 0x81	; 129
 2dc:	df 4f       	sbci	r29, 0xFF	; 255
 2de:	99 83       	std	Y+1, r25	; 0x01
 2e0:	88 83       	st	Y, r24
 2e2:	1f 5f       	subi	r17, 0xFF	; 255
 2e4:	10 93 93 00 	sts	0x0093, r17
  
    // If a loudness trigger has been set and the level is hit 
  if (soundTrigger != 0 && SoundBuffer.buffer[SoundBuffer.bufferLocation - 1] >= soundTrigger) {
 2e8:	80 91 66 00 	lds	r24, 0x0066
 2ec:	90 91 67 00 	lds	r25, 0x0067
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	f1 f0       	breq	.+60     	; 0x330 <__vector_6+0x100>
 2f4:	e0 91 93 00 	lds	r30, 0x0093
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e3 58       	subi	r30, 0x83	; 131
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	20 81       	ld	r18, Z
 304:	31 81       	ldd	r19, Z+1	; 0x01
 306:	80 91 66 00 	lds	r24, 0x0066
 30a:	90 91 67 00 	lds	r25, 0x0067
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	70 f0       	brcs	.+28     	; 0x330 <__vector_6+0x100>
    
    // Set the read value
    soundTriggerReadVal = SoundBuffer.buffer[SoundBuffer.bufferLocation - 1];
 314:	e0 91 93 00 	lds	r30, 0x0093
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	e3 58       	subi	r30, 0x83	; 131
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	90 93 69 00 	sts	0x0069, r25
 32a:	80 93 68 00 	sts	0x0068, r24
    
    // Raise the interrupt pin
    sbi(PORTB, IRQ_PIN);
 32e:	c1 9a       	sbi	0x18, 1	; 24
  }

  if (SoundBuffer.bufferLocation == BUF_SIZE) {
 330:	80 91 93 00 	lds	r24, 0x0093
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	11 f4       	brne	.+4      	; 0x33c <__vector_6+0x10c>
    SoundBuffer.bufferLocation = 0;
 338:	10 92 93 00 	sts	0x0093, r1
  }
}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	1f 91       	pop	r17
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_1>:

ISR(INT0_vect){
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	c7 51       	subi	r28, 0x17	; 23
 39a:	cd bf       	out	0x3d, r28	; 61
  
  // Disable ADC timer for now
  cbi(TIMSK1, OCIE1A);
 39c:	61 98       	cbi	0x0c, 1	; 12

  // Start up slave
  spiX_initslave(0);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	96 de       	rcall	.-724    	; 0xce <spiX_initslave>
  
  // Enable interrupts (SPI needs this)
  sei();
 3a2:	78 94       	sei

  //re-enable USI
  USICR|=(1<<USIOIE)|(1<<USIWM0); 
 3a4:	8d b1       	in	r24, 0x0d	; 13
 3a6:	80 65       	ori	r24, 0x50	; 80
 3a8:	8d b9       	out	0x0d, r24	; 13

  // put 'alive' bit 
  spiX_put(ALIVE_CODE); 
 3aa:	85 e5       	ldi	r24, 0x55	; 85
 3ac:	ab de       	rcall	.-682    	; 0x104 <spiX_put>
  spiX_wait();
 3ae:	d6 de       	rcall	.-596    	; 0x15c <spiX_wait>

unsigned char spiX_get(void)

{

	return storedUSIDR;
 3b0:	00 91 94 00 	lds	r16, 0x0094
  // Grab the command
  char command = spiX_get();
  uint16_t value = -1;
  
  // Initialize variables
  volatile char length = 0;
 3b4:	19 82       	std	Y+1, r1	; 0x01
  volatile DataBuffer dataBuffer;
  volatile uint8_t trigVal = 0;
 3b6:	1a 82       	std	Y+2, r1	; 0x02
  
   // Confirm command 
  spiX_put(command); 
 3b8:	80 2f       	mov	r24, r16
 3ba:	a4 de       	rcall	.-696    	; 0x104 <spiX_put>
  
  // Wait for it to be sent
  spiX_wait();
 3bc:	cf de       	rcall	.-610    	; 0x15c <spiX_wait>
  
  // Switch based on the command
  switch(command){ 
 3be:	04 30       	cpi	r16, 0x04	; 4
 3c0:	40 f4       	brcc	.+16     	; 0x3d2 <__vector_1+0x6e>
 3c2:	02 30       	cpi	r16, 0x02	; 2
 3c4:	98 f4       	brcc	.+38     	; 0x3ec <__vector_1+0x88>
 3c6:	00 23       	and	r16, r16
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <__vector_1+0x7c>
 3ca:	01 30       	cpi	r16, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__vector_1+0x6c>
 3ce:	88 c0       	rjmp	.+272    	; 0x4e0 <__vector_1+0x17c>
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <__vector_1+0x80>
 3d2:	06 30       	cpi	r16, 0x06	; 6
 3d4:	08 f4       	brcc	.+2      	; 0x3d8 <__vector_1+0x74>
 3d6:	48 c0       	rjmp	.+144    	; 0x468 <__vector_1+0x104>
 3d8:	06 30       	cpi	r16, 0x06	; 6
 3da:	09 f0       	breq	.+2      	; 0x3de <__vector_1+0x7a>
 3dc:	81 c0       	rjmp	.+258    	; 0x4e0 <__vector_1+0x17c>
 3de:	5d c0       	rjmp	.+186    	; 0x49a <__vector_1+0x136>
  
   // ACK command checks comms
    case ACK_CMD:     
    
      //Send ACK code
      spiX_put(ACK_CODE); 
 3e0:	83 e3       	ldi	r24, 0x33	; 51
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <__vector_1+0x82>
      spiX_wait();
      break;
    // If they want firmware version
    case FIRMWARE_CMD:
      // Send the firmware version
      spiX_put(FIRMWARE_VERSION); 
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8e de       	rcall	.-740    	; 0x104 <spiX_put>
      spiX_wait();
 3e8:	b9 de       	rcall	.-654    	; 0x15c <spiX_wait>
      break;
 3ea:	7a c0       	rjmp	.+244    	; 0x4e0 <__vector_1+0x17c>
    // Routine for reading buffers
    case LIGHT_CMD: 
    case SOUND_CMD:
   
      // Grab requested buffer
      dataBuffer = bufferForCommand(command); 
 3ec:	ce 01       	movw	r24, r28
 3ee:	03 96       	adiw	r24, 0x03	; 3
 3f0:	60 2f       	mov	r22, r16
 3f2:	fd de       	rcall	.-518    	; 0x1ee <bufferForCommand>
 3f4:	80 91 94 00 	lds	r24, 0x0094
      // Grab read length
      length = spiX_get(); 
 3f8:	89 83       	std	Y+1, r24	; 0x01

      // Echo read length
      spiX_put(length); 
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	83 de       	rcall	.-762    	; 0x104 <spiX_put>
      // Wait for echo to complete
      spiX_wait();
 3fe:	ae de       	rcall	.-676    	; 0x15c <spiX_wait>

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){ 
 400:	10 92 61 00 	sts	0x0061, r1
 404:	10 92 60 00 	sts	0x0060, r1

         // If the buffer is at 0
         if (dataBuffer.bufferLocation == 0) {
           
           // Set it to the end of the buffer
           dataBuffer.bufferLocation = (BUF_SIZE-1); 
 408:	79 e0       	ldi	r23, 0x09	; 9
 40a:	d7 2e       	mov	r13, r23
         }

        // Decrement buffer (we read going backwards)
        dataBuffer.bufferLocation--;

        value = dataBuffer.buffer[dataBuffer.bufferLocation];
 40c:	7e 01       	movw	r14, r28
 40e:	08 94       	sec
 410:	e1 1c       	adc	r14, r1
 412:	f1 1c       	adc	r15, r1
      // Wait for echo to complete
      spiX_wait();

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){ 
 414:	1e c0       	rjmp	.+60     	; 0x452 <__vector_1+0xee>

         // If the buffer is at 0
         if (dataBuffer.bufferLocation == 0) {
 416:	8f 89       	ldd	r24, Y+23	; 0x17
 418:	88 23       	and	r24, r24
 41a:	09 f4       	brne	.+2      	; 0x41e <__vector_1+0xba>
           
           // Set it to the end of the buffer
           dataBuffer.bufferLocation = (BUF_SIZE-1); 
 41c:	df 8a       	std	Y+23, r13	; 0x17
         }

        // Decrement buffer (we read going backwards)
        dataBuffer.bufferLocation--;
 41e:	8f 89       	ldd	r24, Y+23	; 0x17
 420:	81 50       	subi	r24, 0x01	; 1
 422:	8f 8b       	std	Y+23, r24	; 0x17

        value = dataBuffer.buffer[dataBuffer.bufferLocation];
 424:	ef 89       	ldd	r30, Y+23	; 0x17
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	ee 0d       	add	r30, r14
 42e:	ff 1d       	adc	r31, r15
 430:	02 81       	ldd	r16, Z+2	; 0x02
 432:	13 81       	ldd	r17, Z+3	; 0x03

        // Put the byte at the current location in the buffer
        spiX_put(value >> 8);
 434:	81 2f       	mov	r24, r17
 436:	66 de       	rcall	.-820    	; 0x104 <spiX_put>

        // Wait for it to be sent
        spiX_wait();
 438:	91 de       	rcall	.-734    	; 0x15c <spiX_wait>

        spiX_put(value & 0xFF);
 43a:	80 2f       	mov	r24, r16
 43c:	63 de       	rcall	.-826    	; 0x104 <spiX_put>
        spiX_wait();
 43e:	8e de       	rcall	.-740    	; 0x15c <spiX_wait>
      // Wait for echo to complete
      spiX_wait();

      // Iterate through buffer
      // Potential Bug: Could read at one index past the last recorded value. may need to decrement before putting
      for(counter=0;counter<length;counter++){ 
 440:	80 91 60 00 	lds	r24, 0x0060
 444:	90 91 61 00 	lds	r25, 0x0061
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 61 00 	sts	0x0061, r25
 44e:	80 93 60 00 	sts	0x0060, r24
 452:	20 91 60 00 	lds	r18, 0x0060
 456:	30 91 61 00 	lds	r19, 0x0061
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	28 17       	cp	r18, r24
 460:	39 07       	cpc	r19, r25
 462:	cc f2       	brlt	.-78     	; 0x416 <__vector_1+0xb2>
        spiX_wait();
      }

      
      // Put the stop command
      spiX_put(STOP_CMD);
 464:	86 e1       	ldi	r24, 0x16	; 22
 466:	bf cf       	rjmp	.-130    	; 0x3e6 <__vector_1+0x82>
    
    case LIGHT_TRIGGER_CMD:
    case SOUND_TRIGGER_CMD:

      // Gather high 8 bits
      trigVal = (spiX_get() << 8);
 468:	1a 82       	std	Y+2, r1	; 0x02
      // Echo
      spiX_put(trigVal >> 8);
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	4a de       	rcall	.-876    	; 0x104 <spiX_put>
      spiX_wait();
 470:	75 de       	rcall	.-790    	; 0x15c <spiX_wait>

      // Gather low 8 bits
      trigVal |= (spiX_get());
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	90 91 94 00 	lds	r25, 0x0094
 478:	89 2b       	or	r24, r25
 47a:	8a 83       	std	Y+2, r24	; 0x02
      //Echo
      spiX_put(trigVal & 0xFF);
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	42 de       	rcall	.-892    	; 0x104 <spiX_put>
      spiX_wait();
 480:	6d de       	rcall	.-806    	; 0x15c <spiX_wait>
    return SoundBuffer;
  }
}

volatile uint16_t *triggerValueForCommand(uint8_t command) {
  if (command == LIGHT_TRIGGER_CMD) {
 482:	04 30       	cpi	r16, 0x04	; 4
 484:	19 f4       	brne	.+6      	; 0x48c <__vector_1+0x128>
    return &lightTrigger;
 486:	e2 e6       	ldi	r30, 0x62	; 98
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__vector_1+0x12c>
  }
  else {
    return &soundTrigger;
 48c:	e6 e6       	ldi	r30, 0x66	; 102
 48e:	f0 e0       	ldi	r31, 0x00	; 0
      trigVal |= (spiX_get());
      //Echo
      spiX_put(trigVal & 0xFF);
      spiX_wait();

      *(triggerValueForCommand(command)) = trigVal;
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	91 83       	std	Z+1, r25	; 0x01
 496:	80 83       	st	Z, r24
      break;
 498:	23 c0       	rjmp	.+70     	; 0x4e0 <__vector_1+0x17c>
   
   case TRIGGER_FETCH_CMD:
      // Put Light Trigger Val
      spiX_put(lightTriggerReadVal >> 8);
 49a:	80 91 64 00 	lds	r24, 0x0064
 49e:	90 91 65 00 	lds	r25, 0x0065
 4a2:	89 2f       	mov	r24, r25
 4a4:	2f de       	rcall	.-930    	; 0x104 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 4a6:	5a de       	rcall	.-844    	; 0x15c <spiX_wait>

      spiX_put(lightTriggerReadVal & 0xFF);
 4a8:	80 91 64 00 	lds	r24, 0x0064
 4ac:	90 91 65 00 	lds	r25, 0x0065
 4b0:	29 de       	rcall	.-942    	; 0x104 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 4b2:	54 de       	rcall	.-856    	; 0x15c <spiX_wait>

      // Clear it
      lightTriggerReadVal = 0;
 4b4:	10 92 65 00 	sts	0x0065, r1
 4b8:	10 92 64 00 	sts	0x0064, r1

      // Put Loudnesss Trigger Val
      spiX_put(soundTriggerReadVal >> 8);
 4bc:	80 91 68 00 	lds	r24, 0x0068
 4c0:	90 91 69 00 	lds	r25, 0x0069
 4c4:	89 2f       	mov	r24, r25
 4c6:	1e de       	rcall	.-964    	; 0x104 <spiX_put>

      // Wait for it to be sent
      spiX_wait();
 4c8:	49 de       	rcall	.-878    	; 0x15c <spiX_wait>

        // Put Loudnesss Trigger Val
      spiX_put(soundTriggerReadVal & 0xFF); 
 4ca:	80 91 68 00 	lds	r24, 0x0068
 4ce:	90 91 69 00 	lds	r25, 0x0069
 4d2:	18 de       	rcall	.-976    	; 0x104 <spiX_put>

      // Wait for it to go through
      spiX_wait();
 4d4:	43 de       	rcall	.-890    	; 0x15c <spiX_wait>

      // Clear it
      soundTriggerReadVal = 0;
 4d6:	10 92 69 00 	sts	0x0069, r1
 4da:	10 92 68 00 	sts	0x0068, r1

      // Clear IRQ
      cbi(PORTB, IRQ_PIN);
 4de:	c1 98       	cbi	0x18, 1	; 24

      break;
 }
  
  // Disable USI
  USICR&= ~(1<<USIOIE);
 4e0:	6e 98       	cbi	0x0d, 6	; 13
  USICR&= ~(1<<USIWM0);
 4e2:	6c 98       	cbi	0x0d, 4	; 13

  cbi(DDRA, MOSI);
 4e4:	d6 98       	cbi	0x1a, 6	; 26
  cbi(DDRA, MISO);
 4e6:	d5 98       	cbi	0x1a, 5	; 26
  
  // Re-enable ADC reads 
  sbi(TIMSK1, OCIE1A);
 4e8:	61 9a       	sbi	0x0c, 1	; 12
 4ea:	c9 5e       	subi	r28, 0xE9	; 233
 4ec:	cd bf       	out	0x3d, r28	; 61
 4ee:	cf 91       	pop	r28
 4f0:	df 91       	pop	r29
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
